apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Release.Name }}-app
  namespace: {{ .Release.Namespace }}
spec:
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 0
      maxSurge: 1
  replicas: 1
  selector:
    matchLabels:
      app: {{ .Release.Name }}-app
  template:
    metadata:
      labels:
        app: {{ .Release.Name }}-app
      annotations:
        timestamp: {{ date "2006/01/02T15:04:05" .Release.Time | quote }}
    spec:
      containers:
        - name: app
          image: {{ .Values.registry.host }}/rushhour
          imagePullPolicy: Always
          env:
            - name: TZ
              value: Asia/Tokyo
            - name: persist
              value: {{ ne .Values.db.type "None" | quote }}
            {{- if eq .Values.db.type "Pod" }}
            - name: db_spec
              {{- $_ := set .Values.db.pod "host" (printf "%s-db" .Release.Name) }}
              value: {{ template "dbSpec" .Values.db.pod }}
            {{- else if eq .Values.db.type "External" }}
            - name: db_spec
              value: {{ template "dbSpec" .Values.db.external }}
            {{- end }}
          envFrom:
            - secretRef:
                name: {{ .Release.Name }}-app-secret
          ports:
            - containerPort: 8080
          volumeMounts:
            - name: storage
              mountPath: /rushhour/logs
              subPath: {{ .Release.Name }}-app/logs
          resources:
            {{- toYaml .Values.resourcesApp | nindent 12 -}}
          livenessProbe:
            httpGet:
              path: /healthz
              port: 8080
          readinessProbe:
            httpGet:
              path: /readiness
              port: 8080
      imagePullSecrets:
        - name: {{ .Release.Name }}-regcred
      volumes:
        - name: storage
        {{- if .Values.pv.enabled }}
          persistentVolumeClaim:
            claimName: {{ .Release.Name }}-storage-claim
        {{- else }}
          emptyDir: {}
        {{- end -}}